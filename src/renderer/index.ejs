<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <meta
      http-equiv="Content-Security-Policy"
      content="script-src 'self' 'unsafe-inline'"
    />
    <title>Onlysaid<% if (typeof isDevelopment !== 'undefined' && isDevelopment) { %> - Development<% } %></title>
    <meta name="description" content="Onlysaid - AI-powered chat application" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    
    <style>
      :root {
        --bg-light: #f8f9fc;
        --bg-dark: #121212;
        --paper-light: #ffffff;
        --paper-dark: #1e1e1e;
        --text-primary-light: rgba(0, 0, 0, 0.87);
        --text-primary-dark: rgba(255, 255, 255, 0.95);
        --text-secondary-light: rgba(0, 0, 0, 0.6);
        --text-secondary-dark: rgba(255, 255, 255, 0.7);
        --primary: #4f5bd5;
        --divider-light: rgba(0, 0, 0, 0.12);
        --divider-dark: rgba(255, 255, 255, 0.12);
      }

      * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
      }

      body {
        font-family: 'Inter', 'Source Sans Pro', 'Roboto', 'Arial', sans-serif;
        background-color: var(--bg-light);
        color: var(--text-primary-light);
        overflow: hidden;
        transition: background-color 0.3s ease, color 0.3s ease;
      }

      /* Dark mode */
      @media (prefers-color-scheme: dark) {
        body {
          background-color: var(--bg-dark);
          color: var(--text-primary-dark);
        }
        
        .ejs-loading-screen {
          background-color: var(--bg-dark) !important;
        }
        
        .logo-container {
          background-color: var(--paper-dark) !important;
          border-color: var(--divider-dark) !important;
        }
        
        .app-title {
          color: var(--text-primary-dark) !important;
        }
        
        .app-subtitle {
          color: var(--text-secondary-dark) !important;
        }
      }

      .ejs-loading-screen {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: var(--bg-light);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 10000;
        transition: opacity 0.3s ease-out;
      }

      .ejs-loading-screen.hidden {
        opacity: 0;
        pointer-events: none;
      }

      .loading-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        text-align: center;
        max-width: 400px;
        padding: 2rem;
      }

      .logo-container {
        width: 80px;
        height: 80px;
        background-color: var(--paper-light);
        border-radius: 16px;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-bottom: 2rem;
        box-shadow: 
          0px 2px 1px -1px rgba(0,0,0,0.2),
          0px 1px 1px 0px rgba(0,0,0,0.14),
          0px 1px 3px 0px rgba(0,0,0,0.12);
        border: 1px solid var(--divider-light);
        transition: transform 0.2s ease-in-out, background-color 0.3s ease;
      }

      .logo-container:hover {
        transform: translateY(-2px);
      }

      .app-logo {
        width: 48px;
        height: 48px;
        border-radius: 8px;
        opacity: 0;
        transition: opacity 0.3s ease-in;
      }

      .logo-fallback {
        color: var(--primary);
        opacity: 0.8;
      }

      .app-title {
        font-size: 2rem;
        font-weight: 600;
        margin: 0 0 0.5rem 0;
        color: var(--text-primary-light);
        letter-spacing: -0.025em;
        line-height: 1.2;
        transition: color 0.3s ease;
      }

      .app-subtitle {
        font-size: 1rem;
        color: var(--text-secondary-light);
        margin: 0 0 2rem 0;
        font-weight: 400;
        line-height: 1.5;
        transition: color 0.3s ease;
      }

      .loading-indicator {
        width: 40px;
        height: 40px;
        border: 3px solid var(--divider-light);
        border-top: 3px solid var(--primary);
        border-radius: 50%;
        animation: spin 1s linear infinite;
      }

      @media (prefers-color-scheme: dark) {
        .loading-indicator {
          border-color: var(--divider-dark);
          border-top-color: var(--primary);
        }
      }

      @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
      }

      /* Responsive */
      @media (max-width: 480px) {
        .loading-container {
          padding: 1rem;
        }
        .logo-container {
          width: 64px;
          height: 64px;
        }
        .app-logo {
          width: 36px;
          height: 36px;
        }
        .app-title {
          font-size: 1.75rem;
        }
        .app-subtitle {
          font-size: 0.9rem;
        }
      }

      .progress-container {
        width: 100%;
        max-width: 300px;
      }

      .progress-bar {
        width: 100%;
        height: 6px;
        background-color: var(--divider-light);
        border-radius: 3px;
        overflow: hidden;
      }

      .progress-fill {
        height: 100%;
        background-color: var(--primary);
        width: 0%;
        transition: none;
      }

      @media (prefers-color-scheme: dark) {
        .progress-bar {
          background-color: var(--divider-dark);
        }
      }
    </style>
    
    <% if (typeof isDevelopment !== 'undefined' && isDevelopment) { %>
    <style>
      .dev-indicator {
        position: fixed;
        top: 8px;
        right: 8px;
        background: #d32f2f;
        color: white;
        padding: 4px 8px;
        font-size: 10px;
        border-radius: 4px;
        z-index: 10001;
        font-weight: 600;
        box-shadow: 0px 2px 4px rgba(0,0,0,0.2);
      }
    </style>
    <% } %>
  </head>
  <body>
    <% if (typeof isDevelopment !== 'undefined' && isDevelopment) { %>
    <div class="dev-indicator">DEV MODE</div>
    <% } %>
    
    <!-- EJS Loading Screen - Shows IMMEDIATELY -->
    <div id="ejs-loading" class="ejs-loading-screen">
      <div class="loading-container">
        <div class="logo-container">
          <img id="app-logo" class="app-logo" alt="Onlysaid" />
          <svg class="logo-fallback" width="32" height="32" viewBox="0 0 32 32" fill="currentColor">
            <path d="M16 2C8.268 2 2 8.268 2 16s6.268 14 14 14 14-6.268 14-14S23.732 2 16 2zm0 25c-6.065 0-11-4.935-11-11S9.935 5 16 5s11 4.935 11 11-4.935 11-11 11z"/>
            <path d="M16 8c-1.104 0-2 .896-2 2s.896 2 2 2 2-.896 2-2-.896-2-2-2zm-2 6v8h4v-8h-4z"/>
          </svg>
        </div>
        
        <div class="progress-container">
          <div class="progress-bar">
            <div class="progress-fill"></div>
          </div>
        </div>
      </div>
    </div>

    <div id="root"></div>

    <script>
      window.APP_ENV = {
        isDevelopment: typeof isDevelopment !== 'undefined' ? isDevelopment : false,
        isBrowser: typeof isBrowser !== 'undefined' ? isBrowser : false,
        nodeEnv: typeof env !== "undefined" ? env : "production",
        buildTime: new Date().toISOString()
      };

      // Immediately try to load the logo
      (async function loadLogo() {
        try {
          // Wait for electron APIs to be available
          let attempts = 0;
          const maxAttempts = 50; // 5 seconds max
          
          while (!window.electron && attempts < maxAttempts) {
            await new Promise(resolve => setTimeout(resolve, 100));
            attempts++;
          }
          
          if (window.electron && window.electron.fileSystem) {
            const logoData = await window.electron.fileSystem.getLocalAsset('icon.png');
            if (logoData && logoData.data) {
              const logoImg = document.getElementById('app-logo');
              const logoFallback = document.querySelector('.logo-fallback');
              
              if (logoImg) {
                logoImg.src = logoData.data;
                logoImg.style.opacity = '1';
                if (logoFallback) {
                  logoFallback.style.display = 'none';
                }
              }
            }
          }
        } catch (error) {
          console.warn('Failed to load logo in EJS loading screen:', error);
        }
      })();

      // Progress simulation - bar only
      let progress = 0;
      const progressFill = document.querySelector('.progress-fill');
      let startTime = Date.now();
      const duration = 3000; // 3 seconds total
      
      const updateProgress = () => {
        const elapsed = Date.now() - startTime;
        progress = Math.min(100, (elapsed / duration) * 100);
        
        if (progressFill) progressFill.style.width = progress + '%';
        
        if (progress < 100) {
          requestAnimationFrame(updateProgress);
        }
      };
      
      // Start progress after a brief delay
      setTimeout(() => {
        updateProgress();
      }, 300);

      // Function to hide EJS loading screen (called by React)
      window.hideEJSLoading = function() {
        const ejsLoading = document.getElementById('ejs-loading');
        if (ejsLoading) {
          ejsLoading.classList.add('hidden');
          setTimeout(() => {
            ejsLoading.style.display = 'none';
          }, 300);
        }
      };
    </script>

    <% if (typeof isDevelopment !== 'undefined' && isDevelopment) { %>
    <script>
      console.log('%cðŸš€ Onlysaid Development Mode', 'color: #4f5bd5; font-size: 16px; font-weight: bold;');
    </script>
    <% } %>
  </body>
</html>