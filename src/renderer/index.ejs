<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <meta
      http-equiv="Content-Security-Policy"
      content="script-src 'self' 'unsafe-inline'"
    />
    <title id="app-window-title">Loading...<% if (typeof isDevelopment !== 'undefined' && isDevelopment) { %> - Development<% } %></title>
    <meta name="description" content="Onlysaid - AI-powered chat application" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    
    <!-- Remove Google Fonts link and use system fonts for loading -->
    
    <style>
      :root {
        --bg-light: #f8f9fc;
        --bg-dark: #121212;
        --paper-light: #ffffff;
        --paper-dark: #1e1e1e;
        --text-primary-light: rgba(0, 0, 0, 0.87);
        --text-primary-dark: rgba(255, 255, 255, 0.95);
        --text-secondary-light: rgba(0, 0, 0, 0.6);
        --text-secondary-dark: rgba(255, 255, 255, 0.7);
        --primary: #4f5bd5;
        --divider-light: rgba(0, 0, 0, 0.12);
        --divider-dark: rgba(255, 255, 255, 0.12);
      }

      * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
      }

      body {
        /* Use system fonts that match Inter fallbacks */
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;
        background-color: var(--bg-light);
        color: var(--text-primary-light);
        overflow: hidden;
        transition: background-color 0.3s ease, color 0.3s ease;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
      }

      /* Dark mode */
      @media (prefers-color-scheme: dark) {
        body {
          background-color: var(--bg-dark);
          color: var(--text-primary-dark);
        }
        
        .ejs-loading-screen {
          background-color: var(--bg-dark) !important;
        }
        
        .logo-container {
          background-color: var(--paper-dark) !important;
          border-color: var(--divider-dark) !important;
        }
        
        .app-title {
          color: var(--text-primary-dark) !important;
        }
        
        .app-subtitle {
          color: var(--text-secondary-dark) !important;
        }
      }

      .ejs-loading-screen {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: var(--bg-light);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 10000;
        transition: opacity 0.3s ease-out;
      }

      .ejs-loading-screen.hidden {
        opacity: 0;
        pointer-events: none;
      }

      .loading-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        text-align: center;
        max-width: 600px;
        padding: 2rem;
        width: 100%;
      }

      .logo-container {
        width: 80px;
        height: 80px;
        background-color: var(--paper-light);
        border-radius: 16px;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-bottom: 2rem;
        box-shadow: 
          0px 2px 1px -1px rgba(0,0,0,0.2),
          0px 1px 1px 0px rgba(0,0,0,0.14),
          0px 1px 3px 0px rgba(0,0,0,0.12);
        border: 1px solid var(--divider-light);
        transition: transform 0.2s ease-in-out, background-color 0.3s ease;
      }

      .logo-container:hover {
        transform: translateY(-2px);
      }

      .app-logo {
        width: 48px;
        height: 48px;
        border-radius: 8px;
        opacity: 0;
        transition: opacity 0.3s ease-in;
      }

      .logo-fallback {
        color: var(--primary);
        opacity: 0.8;
      }

      .app-title {
        font-size: 2rem;
        font-weight: 600;
        margin: 0 0 0.5rem 0;
        color: var(--text-primary-light);
        letter-spacing: -0.025em;
        line-height: 1.2;
        transition: color 0.3s ease;
      }

      .app-subtitle {
        font-size: 1rem;
        color: var(--text-secondary-light);
        margin: 0 0 2rem 0;
        font-weight: 400;
        line-height: 1.5;
        transition: color 0.3s ease;
      }

      .loading-indicator {
        width: 40px;
        height: 40px;
        border: 3px solid var(--divider-light);
        border-top: 3px solid var(--primary);
        border-radius: 50%;
        animation: spin 1s linear infinite;
      }

      @media (prefers-color-scheme: dark) {
        .loading-indicator {
          border-color: var(--divider-dark);
          border-top-color: var(--primary);
        }
      }

      @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
      }

      /* Responsive */
      @media (max-width: 480px) {
        .loading-container {
          padding: 1rem;
        }
        .logo-container {
          width: 64px;
          height: 64px;
        }
        .app-logo {
          width: 36px;
          height: 36px;
        }
        .app-title {
          font-size: 1.75rem;
        }
        .app-subtitle {
          font-size: 0.9rem;
        }
      }

      .progress-container {
        width: 100%;
        max-width: 350px;
        margin-bottom: 1rem;
      }

      .progress-bar {
        width: 100%;
        height: 3px;
        background-color: var(--divider-light);
        border-radius: 0;
        overflow: hidden;
        box-shadow: inset 0 1px 3px rgba(0,0,0,0.1);
      }

      .progress-fill {
        height: 100%;
        background: linear-gradient(90deg, var(--primary), #6366f1);
        width: 0%;
        transition: width 0.4s ease-out;
        border-radius: 0;
      }

      @media (prefers-color-scheme: dark) {
        .progress-bar {
          background-color: var(--divider-dark);
        }
      }

      /* Responsive adjustments */
      @media (max-width: 600px) {
        .progress-container {
          max-width: 280px;
        }
      }

      @media (max-width: 480px) {
        .progress-container {
          max-width: 250px;
        }
        .progress-bar {
          height: 2px;
        }
      }
    </style>
    
    <% if (typeof isDevelopment !== 'undefined' && isDevelopment) { %>
    <style>
      .dev-indicator {
        position: fixed;
        top: 8px;
        right: 8px;
        background: #d32f2f;
        color: white;
        padding: 4px 8px;
        font-size: 10px;
        border-radius: 4px;
        z-index: 10001;
        font-weight: 600;
        box-shadow: 0px 2px 4px rgba(0,0,0,0.2);
      }
    </style>
    <% } %>
  </head>
  <body>
    <% if (typeof isDevelopment !== 'undefined' && isDevelopment) { %>
    <div class="dev-indicator">DEV MODE</div>
    <% } %>
    
    <!-- EJS Loading Screen - Shows IMMEDIATELY -->
    <div id="ejs-loading" class="ejs-loading-screen">
      <div class="loading-container">
        <div class="logo-container">
          <img id="app-logo" class="app-logo" alt="App Logo" />
          <svg class="logo-fallback" width="32" height="32" viewBox="0 0 32 32" fill="currentColor">
            <path d="M16 2C8.268 2 2 8.268 2 16s6.268 14 14 14 14-6.268 14-14S23.732 2 16 2zm0 25c-6.065 0-11-4.935-11-11S9.935 5 16 5s11 4.935 11 11-4.935 11-11 11z"/>
            <path d="M16 8c-1.104 0-2 .896-2 2s.896 2 2 2 2-.896 2-2-.896-2-2-2zm-2 6v8h4v-8h-4z"/>
          </svg>
        </div>
        
        <h1 class="app-title" id="app-title">Loading...</h1>
        <p class="app-subtitle" id="app-subtitle">AI-powered collaboration platform</p>
        <p class="app-subtitle" id="loading-text">Initializing application...</p>
        
        <div class="progress-container">
          <div class="progress-bar">
            <div class="progress-fill"></div>
          </div>
        </div>
        
        <!-- THEi sentence display -->
        <p class="app-subtitle" id="thei-sentence"></p>
      </div>
    </div>

    <div id="root"></div>

    <script>
      window.APP_ENV = {
        isDevelopment: typeof isDevelopment !== 'undefined' ? isDevelopment : false,
        isBrowser: typeof isBrowser !== 'undefined' ? isBrowser : false,
        nodeEnv: typeof env !== "undefined" ? env : "production",
        buildTime: new Date().toISOString()
      };

      // ✅ Dynamic App Configuration
      let appConfig = {
        name: 'Onlysaid',
        productName: 'Onlysaid',
        version: '1.0.0',
        subtitle: 'AI-powered collaboration platform'
      };

      // ✅ Function to get app info from environment/package.json
      const getAppInfo = async () => {
        try {
          if (window.electron && window.electron.app) {
            const [appName] = await Promise.all([
              window.electron.app.getName?.()
            ]);
            
            if (appName) {
              appConfig.name = appName;
              appConfig.productName = appName;
              console.log('[EJS] Got app name from electron:', appName);
            }
          }
        } catch (error) {
          console.warn('[EJS] Could not get app info from electron APIs:', error);
        }

        // Update all UI elements
        const windowTitle = document.getElementById('app-window-title');
        const appTitle = document.getElementById('app-title');
        
        if (windowTitle) {
          windowTitle.textContent = `${appConfig.productName}<% if (typeof isDevelopment !== 'undefined' && isDevelopment) { %> - Development<% } %>`;
        }
        if (appTitle) {
          appTitle.textContent = appConfig.productName;
        }

        return appConfig;
      };

      // ✅ Simplified Localization with proper string formatting
      const translations = {
        'en': {
          'loading.subtitle': 'AI-powered collaboration platform',
          'loading.initializing': 'Initializing application...',
          'loading.loadingAssets': 'Loading essential assets...',
          'loading.settingUpAuth': 'Setting up authentication...',
          'loading.settingUpCalendars': 'Setting up calendar listeners...',
          'loading.waitingGoogleServices': 'Waiting for Google services...',
          'loading.initializingMCP': 'Initializing MCP services (%CURRENT%/%TOTAL%)...',
          'loading.readyToStart': 'Ready to start!',
          'loading.completed': 'completed',
          'loading.thei1': 'THEi offers vocationally-oriented degree programmes with industry collaboration.',
          'loading.thei2': 'THEi develops competent professionals through real-life projects and industrial attachments.',
          'loading.thei3': 'THEi provides practical education in technology, design, engineering, and business management.'
        },
        'ja': {
          'loading.subtitle': 'AI搭載コラボレーションプラットフォーム',
          'loading.initializing': 'アプリケーションを初期化中...',
          'loading.loadingAssets': '必須アセットを読み込み中...',
          'loading.settingUpAuth': '認証を設定中...',
          'loading.settingUpCalendars': 'カレンダーリスナーを設定中...',
          'loading.waitingGoogleServices': 'Googleサービスを待機中...',
          'loading.initializingMCP': 'MCPサービスを初期化中 (%CURRENT%/%TOTAL%)...',
          'loading.readyToStart': '開始準備完了！',
          'loading.completed': '完了',
          'loading.thei1': 'THEiは業界と密接に連携した実践的な学位プログラムを提供しています。',
          'loading.thei2': 'THEiは実際のプロジェクトと企業研修を通じて優秀な専門家を育成します。',
          'loading.thei3': 'THEiは技術、デザイン、工学、経営管理の実践的教育を提供します。'
        },
        'zh-hk': {
          'loading.subtitle': 'AI 驅動的協作平台',
          'loading.initializing': '正在初始化應用程式...',
          'loading.loadingAssets': '正在載入必要資源...',
          'loading.settingUpAuth': '正在設定身份驗證...',
          'loading.settingUpCalendars': '正在設定日曆...',
          'loading.waitingGoogleServices': '正在等待 Google 服務...',
          'loading.initializingMCP': '正在初始化 MCP 服務 (%CURRENT%/%TOTAL%)...',
          'loading.readyToStart': '準備就緒！',
          'loading.completed': '已完成',
          'loading.thei1': 'THEi 提供與業界緊密合作的職業導向學位課程。',
          'loading.thei2': 'THEi 透過實際項目和工業實習培育專業人才。',
          'loading.thei3': 'THEi 在科技、設計、工程和商業管理方面提供實踐教育。'
        }
      };

      // ✅ Locale detection (unchanged)
      let currentLocale = 'zh-hk';

      const getStoredLocale = () => {
        try {
          const stored = localStorage.getItem('locale');
          return stored && translations[stored] ? stored : null;
        } catch (e) {
          return null;
        }
      };

      const getBrowserLocale = () => {
        const browserLang = navigator.language.toLowerCase();
        if (browserLang.startsWith('zh')) {
          return 'zh-hk';
        } else if (browserLang.startsWith('ja')) {
          return 'ja';
        } else if (browserLang.startsWith('en')) {
          return 'en';
        }
        return 'zh-hk';
      };

      const detectLocale = () => {
        const stored = getStoredLocale();
        if (stored) return stored;
        return getBrowserLocale();
      };

      currentLocale = detectLocale();

      // ✅ Fixed translation function with proper string replacement
      const t = (key, params = {}) => {
        let translation = translations[currentLocale]?.[key] || translations['en']?.[key] || key;
        
        // Replace %CURRENT% and %TOTAL% patterns (more reliable than {})
        if (params.current !== undefined) {
          translation = translation.replace(/%CURRENT%/g, params.current);
        }
        if (params.total !== undefined) {
          translation = translation.replace(/%TOTAL%/g, params.total);
        }
        
        // Also support {current} and {total} for backward compatibility
        translation = translation.replace(/\{current\}/g, params.current || '{current}');
        translation = translation.replace(/\{total\}/g, params.total || '{total}');
        
        return translation;
      };

      // ✅ Update UI text with localized content
      const updateLocalizedText = () => {
        const appTitle = document.getElementById('app-title');
        const appSubtitle = document.getElementById('app-subtitle');
        const loadingText = document.getElementById('loading-text');
        const theiSentence = document.getElementById('thei-sentence');

        if (appTitle) appTitle.textContent = appConfig.productName;
        if (appSubtitle) appSubtitle.textContent = getRandomTheISentence();
        if (loadingText) loadingText.textContent = t('loading.initializing');
        // Remove the separate THEi sentence since we're using it as the main subtitle
        if (theiSentence) theiSentence.style.display = 'none';
      };

      // ✅ Function to get random THEi sentence
      const getRandomTheISentence = () => {
        const theiSentences = ['loading.thei1', 'loading.thei2', 'loading.thei3'];
        const randomIndex = Math.floor(Math.random() * theiSentences.length);
        return t(theiSentences[randomIndex]);
      };

      // ✅ Progress tracking
      let currentProgress = 0;
      const progressFill = document.querySelector('.progress-fill');
      const loadingText = document.getElementById('loading-text');

      const updateProgress = (percentage, textKey, params = {}) => {
        currentProgress = percentage;
        if (progressFill) {
          progressFill.style.width = percentage + '%';
        }
        if (loadingText) {
          loadingText.textContent = t(textKey, params);
        }
      };

      // ✅ Step mapping with direct string formatting
      const getStepTranslationKey = (stepName, mcpProgress = null) => {
        // Handle MCP progress with proper parameter passing
        if (stepName === 'Initializing MCP services' && mcpProgress && mcpProgress.current !== undefined && mcpProgress.total !== undefined) {
          return { 
            key: 'loading.initializingMCP', 
            params: { 
              current: mcpProgress.current, 
              total: mcpProgress.total 
            } 
          };
        }

        const stepMap = {
          'Loading essential assets': 'loading.loadingAssets',
          'Setting up authentication': 'loading.settingUpAuth',
          'Setting up calendar listeners': 'loading.settingUpCalendars',
          'Initializing MCP services': 'loading.initializingMCP',
          'Ready to start': 'loading.readyToStart'
        };

        return { key: stepMap[stepName] || 'loading.initializing', params: {} };
      };

      // ✅ Exposed functions for React with better parameter handling
      window.updateEJSProgress = (percentage, stepName, mcpProgress = null) => {
        console.log('[EJS] updateEJSProgress called:', { percentage, stepName, mcpProgress });
        const { key, params } = getStepTranslationKey(stepName, mcpProgress);
        updateProgress(percentage, key, params);
      };

      window.setEJSLoadingText = (stepName, mcpProgress = null) => {
        console.log('[EJS] setEJSLoadingText called:', { stepName, mcpProgress });
        const { key, params } = getStepTranslationKey(stepName, mcpProgress);
        if (loadingText) {
          loadingText.textContent = t(key, params);
        }
      };

      // ✅ Initialize everything
      (async function initialize() {
        try {
          let attempts = 0;
          const maxAttempts = 50;
          
          while (!window.electron && attempts < maxAttempts) {
            await new Promise(resolve => setTimeout(resolve, 100));
            attempts++;
          }
          
          await getAppInfo(); // Get both name and version
          updateLocalizedText();

          // Load logo
          if (window.electron && window.electron.fileSystem) {
            try {
              const logoData = await window.electron.fileSystem.getLocalAsset('icon.png');
              if (logoData && logoData.data) {
                const logoImg = document.getElementById('app-logo');
                const logoFallback = document.querySelector('.logo-fallback');
                
                if (logoImg) {
                  logoImg.alt = `${appConfig.productName} Logo`;
                  
                  logoImg.onerror = function() {
                    logoImg.style.display = 'none';
                    if (logoFallback) {
                      logoFallback.style.display = 'block';
                    }
                  };
                  
                  logoImg.onload = function() {
                    logoImg.style.opacity = '1';
                    if (logoFallback) {
                      logoFallback.style.display = 'none';
                    }
                  };
                  
                  logoImg.src = logoData.data;
                }
              }
            } catch (assetError) {
              console.warn('Failed to load asset:', assetError);
              const logoFallback = document.querySelector('.logo-fallback');
              if (logoFallback) {
                logoFallback.style.display = 'block';
              }
            }
          }
          
        } catch (error) {
          console.warn('Failed to initialize EJS loading:', error);
          const logoFallback = document.querySelector('.logo-fallback');
          if (logoFallback) {
            logoFallback.style.display = 'block';
          }
        }
      })();

      // ✅ Hide function
      window.hideEJSLoading = function() {
        if (loadingText) {
          loadingText.textContent = t('loading.readyToStart');
        }
        
        setTimeout(() => {
          const ejsLoading = document.getElementById('ejs-loading');
          if (ejsLoading) {
            ejsLoading.classList.add('hidden');
            setTimeout(() => {
              ejsLoading.style.display = 'none';
            }, 300);
          }
        }, 800);
      };
    </script>

    <% if (typeof isDevelopment !== 'undefined' && isDevelopment) { %>
    <script>
      console.log('%c🚀 Development Mode', 'color: #4f5bd5; font-size: 16px; font-weight: bold;');
    </script>
    <% } %>
  </body>
</html>